#!/usr/libexec/flua
--
-- Copyright (c) 2016-2025 Ryan Moeller
--
-- SPDX-License-Identifier: ISC
--

--
-- Use with inetd:
-- http    stream  tcp     nowait  root    /path/to/lua-httpd/samples/beup/server.flua     beup-server
--

local lfs <const> = require("lfs")
local posix <const> = require("posix")

local basedir <const> = posix.libgen.dirname(arg[0])

local function path(...)
    return table.concat(table.pack(...), "/")
end

local function relpath(...)
    return path(basedir, ...)
end

-- Add import search paths for the modules in this repo.
package.path = table.concat({
    relpath("../../?.lua"),             -- httpd.lua
    relpath("../contrib/?.lua"),        -- samples/contrib/template.lua
    package.path
}, ";")

-- Redirect stderr to a log file.
do
    local STDERR_FILENO <const> = 2
    require("fileno") -- from ryan-moeller/flualibs
    local f <close> = io.open("/var/log/beup-errors.log", "a+")
    f:setvbuf("no")
    assert(posix.unistd.dup2(f:fileno(), STDERR_FILENO) == STDERR_FILENO)
end

local httpd = require("httpd")
local template = require("template")
local ucl <const> = require("ucl")

local function freebsd_version()
    local f = assert(io.popen("freebsd-version", "r"))
    local version = f:read("*a"):match("([^\n]+)")
    f:close()
    return version
end

local function be_list()
    local f = assert(io.popen("bectl list -HC creation", "r"))
    local t = f:read("*a")
    f:close()
    local bes = {}
    local pat = "([^\t]+)\t([^\t]+)\t([^\t]+)\t([^\t]+)\t([^\t]+)\n"
    for name, active, mountpoint, space, created in t:gmatch(pat) do
        table.insert(bes, {
            name = name,
            active = active,
            mountpoint = mountpoint,
            space = space,
            created = created,
        })
    end
    return bes
end

local function be_create(name)
    assert(os.execute("bectl create "..name))
end

local function be_mount(name)
    local f = assert(io.popen("bectl mount "..name, "r"))
    local mountpoint = f:read("*a"):match("([^\n]+)")
    f:close()
    return mountpoint
end

local function be_umount(name)
    assert(os.execute("bectl umount "..name))
end

local function be_activate(name)
    assert(os.execute("bectl activate "..name))
end

local function snaps_list(basedir)
    local snaps = {}
    -- We'll assume this works for now.
    for ent in lfs.dir(basedir) do
        local path = basedir.."/"..ent
        if ent ~= "." and ent ~= ".." and lfs.attributes(path).mode == "directory" then
            table.insert(snaps, ent)
        end
    end
    table.sort(snaps, function(a, b) return a > b end)
    return snaps
end

local basedir = "/system"
local branch = freebsd_version()
local distributions = {"kernel.txz", "kernel-dbg.txz", "base.txz", "base-dbg.txz", "src.txz"}
local snapshots_site = "https://download.freebsd.org/ftp/snapshots/amd64/amd64/"..branch

local function fetch_snapshot_meta(name)
    local f = assert(io.popen("fetch -qo - "..snapshots_site.."/"..name))
    local t = f:read("*a"):match("([^\n]+)")
    f:close()
    return t
end

local theme = "darkly"

local server = httpd.create_server("/var/log/beup.log")
server:add_route("GET", "^/$", function(request)
    local body = template.process([[
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Update FreeBSD Snapshot Boot Environment</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
    <link rel="stylesheet" href="https://unpkg.com/bulmaswatch/{{theme}}/bulmaswatch.min.css">
  </head>
  <body>
    <div class="columns is-centered">
      <div class="column is-narrow">

        <h1 class="title">Update <span class="has-text-danger">FreeBSD</span> Snapshot Boot Environment</h1>

        <h2 class="subtitle">Boot Environments</h2>
        <table class="table">
          <thead>
            <tr>
              <th>BE</th>
              <th>Active</th>
              <th>Mountpoint</th>
              <th>Space</th>
              <th>Created</th>
            </tr>
          </thead>
          <tbody>
          {% for _, be in pairs(bootenvs) do %}
            <tr>
              <td>{{be.name}}</td>
              <td>{{be.active}}</td>
              <td>{{be.mountpoint}}</td>
              <td>{{be.space}}</td>
              <td>{{be.created}}</td>
            </tr>
          {% end %}
          </tbody>
        </table>

        <h2 class="subtitle">Snapshots (Local)</h2>
        <table class="table">
          <thead>
            <tr>
              <th>Build Date</th>
              <th>Revision</th>
              <th>Path</th>
              <th>BE?</th>
            </tr>
          </thead>
          <tbody>
          {% for _, snap in ipairs(snapshots) do %}
            <tr>
              <td>{{snap:match("([^-]+)-")}}</td>
              <td>{{snap:match("-([^-]+)")}}</td>
              <td>{{basedir.."/"..snap}}</td>
              <td>{{be_find(bootenvs, snap) and "yes" or "no"}}</td>
            </tr>
          {% end %}
          </tbody>
        </table>

        <h2 class="subtitle">Updates</h2>
        {% if be_find(bootenvs, latest) then %}
        <p>The latest snapshot is installed.</p>
        {% else %}
        <p><em>A new snapshot is available!</em></p>
        <form action="/update" method="POST">
          <div class="field">
            <label class="label">Update to {{latest}}?</label>
            <div class="control">
              <button class="button is-primary" type="submit" name="latest" value="{{latest}}">
                Create Updated Boot Environment
              </button>
            </div>
          </div>
        </form>
        {% end %}

      </div>
    </div>
  </body>
</html>
]], { theme = theme,
      basedir = basedir,
      bootenvs = be_list(),
      snapshots = snaps_list(basedir),
      latest = fetch_snapshot_meta("BUILDDATE").."-"..fetch_snapshot_meta("REVISION"),
      be_find = function(bes, name)
          for _, be in ipairs(bes) do
              if be.name == name then return true end
          end
          return false
      end
    })
    return { status=200, reason="ok", body=body }
end)
server:add_route("GET", "^/latest$", function(request)
    return { status=200, reason="ok", body=fetch_snapshot_meta("BUILDDATE").."-"..fetch_snapshot_meta("REVISION") }
end)
server:add_route("POST", "^/update$", function(request)
    -- FIXME: this whole function is nasty ;)
    local log = request.server.log
    log:write("checking request validity\n")
    local content_type = request.headers["content-type"]
    if not content_type or not content_type:contains_value("application/x-www-form-urlencoded") then
        log:write("request with invalid form content-type\n")
        return { status=415, reason="unsupported media type",
                 body="This form must be submitted as application/x-www-form-urlencoded data." }
    end
    -- Check BUILDDATE and REVISION again as a protection against stale form submissions.
    log:write("parsing request body\n")
    local form = httpd.parse_query_string(request.body)
    local wanted = table.concat(form.latest)
    log:write("fetching patest snapshot meta\n")
    local latest = fetch_snapshot_meta("BUILDDATE").."-"..fetch_snapshot_meta("REVISION")
    if wanted ~= latest then
        log:write("request for unavailable snapshot build\n")
        return { status=404, reason="not found",
                 body="The requested snapshot build was not found on the server." }
    end
    local archives = basedir.."/"..latest
    log:write("mkdir("..archives..")\n")
    if not lfs.mkdir(archives) then
        local attrs = assert(lfs.attributes(archives))
        assert(attrs.mode == "directory")
    end
    log:write("feching archives (serially)\n")
    for _, f in ipairs(distributions) do
        local path = archives.."/"..f
        local url = snapshots_site.."/"..f
        -- TODO: fire off a background task, show progress to user
        assert(os.execute("fetch -qmo "..path.." "..url))
    end
    log:write("creating be\n")
    be_create(latest)
    log:write("mounting be\n")
    local mountpoint = be_mount(latest)
    log:write("mounted at "..mountpoint.."\n")
    log:write("setting filesystem flags\n")
    assert(os.execute("chflags -R noschg "..mountpoint))
    log:write("extracting archives:")
    for _, f in ipairs(distributions) do
        log:write(" "..f)
        if f == "src.txz" then
            -- TODO: preserve local changes in /usr/src
            assert(os.execute("rm -rf /usr/src/*"))
            assert(os.execute("tar -xf "..archives.."/"..f.." -C /"))
        else
            -- TODO: remove obsolete files from cloned be
            assert(os.execute("tar -xf "..archives.."/"..f.." -C "..mountpoint))
        end
    end
    log:write("\n")
    log:write("copying system config files:")
    for _, f in ipairs({"passwd", "group", "master.passwd", "services", "inetd.conf"}) do
        log:write(" "..f)
        -- cat to preserve metadata (etcupdate does it this way)
        assert(os.execute("cat /etc/"..f.." >"..mountpoint.."/etc/"..f))
    end
    log:write("\n")
    log:write("regenerating system databases\n")
    assert(os.execute("pwd_mkdb -d "..mountpoint.."/etc -p "..mountpoint.."/etc/master.passwd"))
    assert(os.execute("services_mkdb -q -o "..mountpoint.."/var/db/services.db "..mountpoint.."/etc/services"))
    -- TODO: any other files that are overwritten by the archive extraction and need preservation,
    -- proper 3-way merge like etcupdate...
    log:write("unmounting be\n")
    be_umount(latest)
    log:write("activating be\n")
    be_activate(latest)
    log:write("sending HTTP 201 response\n")
    local body = template.process([[
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Created FreeBSD Snapshot Boot Environment</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.8.2/css/bulma.min.css">
    <link rel="stylesheet" href="https://unpkg.com/bulmaswatch/{{theme}}/bulmaswatch.min.css">
  </head>
  <body>
    <div class="columns is-centered">
      <div class="column is-narrow">

        <h1 class="title">Created FreeBSD Snapshot Boot Environment</h1>

        <h2 class="subtitle">Success!</h2>
        <p>The boot environment <em>{{latest}}</em> was created and activated!</p>
        <p><em>TODO: update bootloader<em></p>
        <p>Reboot to complete the update.</p>

      </div>
    </div>
  </body>
</html>
]], { theme = theme,
      latest = latest
    })
    return { status=201, reason="created", body=body }
end)
server:run(true)

-- vim: set et sw=4:
