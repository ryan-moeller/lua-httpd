#!/usr/libexec/flua
-- vim: set et sw=4:
--
-- Use with inetd:
-- http    stream  tcp     nowait  root    /path/to/lua-httpd/samples/jails/server.flua    jails-server

--
-- Copyright (c) 2016-2025 Ryan Moeller
--
-- Permission to use, copy, modify, and distribute this software for any
-- purpose with or without fee is hereby granted, provided that the above
-- copyright notice and this permission notice appear in all copies.
--
-- THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
-- WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
-- MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
-- ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
-- WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
-- ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
-- OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
--

local posix <const> = require("posix")

local basedir <const> = posix.libgen.dirname(arg[0])

local function path(...)
    return table.concat(table.pack(...), "/")
end

local function relpath(...)
    return path(basedir, ...)
end

-- Add import search paths for the modules in this repo.
package.path = table.concat({
    relpath("../../?.lua"),             -- httpd.lua
    relpath("../contrib/?.lua"),        -- samples/contrib/template.lua
    package.path
}, ";")

-- Redirect stderr to a log file.
do
    local STDERR_FILENO <const> = 2
    require("fileno") -- from ryan-moeller/flualibs
    local f <close> = io.open("/var/log/jails-errors.log", "a+")
    f:setvbuf("no")
    assert(posix.unistd.dup2(f:fileno(), STDERR_FILENO) == STDERR_FILENO)
end

local httpd = require("httpd")
local template = require("template")
local ucl <const> = require("ucl")

local jail = require("jail")

local theme = "darkly"
local snapsdir = "/system"

local function make_table(ctx)
    return template.process([[
        <h2 class="subtitle">{{title}}</h2>
        <table class="table">
          <thead>
            <tr>
            {% for _, field in ipairs(cols) do %}
              <th>
              {% if #field[1] == #field[2] then %}
                {{field[2]}}
              {% else %}
                <abbr title="{{field[1]}}">{{field[2]}}</abbr>
              {% end %}
              </th>  
            {% end %}
            </tr>
          </thead>
          <tbody>
          {% for _, row in ipairs(rows()) do %}
            <tr>
            {% for _, field in ipairs(cols) do %}
              {% if field[3] ~= nil then %}
              <td>{*row[(field[1])]*}</td>
              {% else %}
              <td>{{row[(field[1])]}}</td>
              {% end %}
            {% end %}
            </tr>
          {% end %}
          </tbody>
        </table>
]], ctx)
end

local jls_cols = {
    {"jid", "JID"},
    {"name", "NAME"},
    {"ip4.addr", "IP ADDRESS"},
    {"host.hostname", "HOSTNAME"},
    {"path", "PATH"},
}

local function jls()
    if jls_cached then
        return jls_cached
    end
    local jails = {}
    -- NB: "jid" and "name" always present in list
    for params in jail.list({"ip4.addr", "host.hostname", "path"}) do
        table.insert(jails, params)
    end
    jls_cached = jails
    return jails
end

local snaps_cols = {
    {"name", "NAME"},
    {"builddate", "BUILDDATE"},
    {"revision", "REVISION", true},
    {"path", "PATH"},
}

local function commit_url(id)
    return '<a href="https://cgit.freebsd.org/src/commit/?id='..id..'">'..id..'</a>'
end

local function snaps()
    if snaps_cached then
        return snaps_cached
    end
    local s = {}
    for ent in lfs.dir(snapsdir) do
        if ent ~= "." and ent ~= ".." then
            local builddate, revision = ent:match("([^-]+)-([^-]+)")
            table.insert(s, {
                name = ent,
                builddate = builddate,
                revision = commit_url(revision),
                path = snapsdir.."/"..ent
            })
        end
    end
    table.sort(s, function(a, b) return a.builddate > b.builddate end)
    snaps_cached = s
    return s
end

local function all_jail_params_dict()
    if all_jail_params_dict_cached then
        return all_jail_params_dict_cached
    end
    local formats = {
        ["A"] = {
            type = "string",
            validate = function(s) return s:match(".*") end
        },
        ["B"] = {
            type = "boolean",
            validate = function(s) return s:match("(true|false)") end
        },
        ["E,jailsys"] = {
            type = "jailsys",
            validate = function(s) return s:match("(inherit|new|disable)") end
        },
        ["I"] = {
            type = "integer",
            validate = function(s) return s:match("^%-?%d+\n?$") end -- XXX: is hexadecimal ok?
        },
        ["LU"] = {
            type = "unsigned",
            validate = function(s) return s:match("^%d+\n?$") end -- XXX: ^
        },
        ["N"] = {
            type = "node",
            validate = function(s) return false end -- Nodes are not valid params
        },
        ["S,in6_addr,a"] = {
            type = "in6_addr",
            validate = function(s)
                local chunks = {s:match("^(%x*):(%x*):(%x*):(%x*):(%x*):(%x*):(%x*):(%x*)$")}
                if #chunks == 8 or
                   #chunks < 8 and s:match("::") and not s:gsub("::", "", 1):match("::") then
                    if #v > 0 and tonumber(v, 16) > 65535 then
                        return false
                    end
                    return true
                end
                return false
            end
        },
        ["S,in_addr,a"] = {
            type = "in_addr",
            validate = function(s)
                local chunks = {s:match("^(%d%d?%d?)%.(%d%d?%d?)%.(%d%d?%d?)%.(%d%d?%d?)$")}
                if #chunks == 4 then
                    for _, v in pairs(chunks) do
                        if tonumber(v) > 255 then
                            return false
                        end
                    end
                    return true
                end
                return false
            end
        },
    }
    local f = assert(io.popen("sysctl -F security.jail.param"))
    local t = f:read("*a")
    f:close()
    -- Some jail params are handled internally by jail(8)
    local params = {
        ["allow.dying"] = formats["B"],
        ["command"] = formats["A"],
        ["depend"] = formats["A"],
        ["exec.clean"] = formats["B"],
        ["exec.consolelog"] = formats["A"],
        ["exec.fib"] = formats["I"],
        ["exec.jail_user"] = formats["A"],
        ["exec.poststart"] = formats["A"],
        ["exec.poststop"] = formats["A"],
        ["exec.prepare"] = formats["A"],
        ["exec.prestart"] = formats["A"],
        ["exec.prestop"] = formats["A"],
        ["exec.release"] = formats["A"],
        ["exec.created"] = formats["A"],
        ["exec.start"] = formats["A"],
        ["exec.stop"] = formats["A"],
        ["exec.system_jail_user"] = formats["B"],
        ["exec.system_user"] = formats["A"],
        ["exec.timeout"] = formats["I"],
        ["interface"] = formats["A"],
        ["ip_hostname"] = formats["B"],
        ["mount"] = formats["A"],
        ["mount.devfs"] = formats["B"],
        ["mount.fdescfs"] = formats["B"],
        ["mount.procfs"] = formats["B"],
        ["mount.fstab"] = formats["A"],
        ["stop.timeout"] = formats["I"],
        ["vnet.interface"] = formats["A"],
        ["mount.fstab"] = formats["A"],
    }
    -- Other jail params are handled by the kernel/modules
    for n, f in t:gmatch("security.jail.param.([^:]+)%.?: ([^\n]+)") do
        local format = formats[f]
        if format.type ~= "node" then
            -- Trim trailing '.' character from MIBs to form param names
            if n:sub(-1, -1) == "." then
                n = n:sub(1, -2)
            end
            params[n] = format
        end
    end
    all_jail_params_dict_cached = params
    return params
end

-- Table for easy checking of unsettable params
local readonly_jail_params = {
    ["children.cur"] = true,
    ["cpuset.id"] = true,
    ["dying"] = true,
    ["parent"] = true,
}

local function params()
    if params_cached then
        return params_cached
    end
    local t = {}
    for name, format in pairs(all_jail_params_dict()) do
        if not readonly_jail_params[name] then
            table.insert(t, {name=name, type=format.type, validate=format.validate})
        end
    end
    table.sort(t, function(a, b) return a.name < b.name end)
    params_cached = t
    return t
end

local function param_types()
    if param_types_cached then
        return param_types_cached
    end
    local t = {}
    for _, param in ipairs(params()) do
        table.insert(t, {name=param.name, type=param.type})
    end
    param_types_cached = t
    return t
end

-- TODO: more templates, some way of expressing template rules
local templates = {
    { name="minimal", params={"name"} },
    { name="basic", params={"name", "ip4.addr", "host.hostname"} },
    { name="vnet", params={"name", "ip4", "host.hostname", "vnet"} },
    { name="linux", params={"name", "ip4", "host.hostname", "linux"} },
}

local function zfs_get(prop, ds)
    local f = assert(io.popen("zfs get -Ho value "..prop.." "..ds))
    local t = f:read("*l")
    f:close()
    return t
end

local jailsds = "system/jails"
local jailsdir = zfs_get("mountpoint", jailsds)

local function main_contents(request)
    return {
        make_table{title="Running Jails", cols=jls_cols, rows=jls},
        make_table{title="Downloaded Snapshots", cols=snaps_cols, rows=snaps},
        template.process([[
          <h2 class="subtitle">Create A Jail</h2>
          <form action="/create" method="POST">

            <div class="field is-horizontal">
              <div class="field-label is-normal">
                <label class="label">Base Snapshot</label>
              </div>
              <div class="field-body">
                <div class="field">
                  <div class="control is-expanded">
                    <div class="select is-fullwidth">
                      <select name="$snapshot">
                      {% for _, snap in ipairs(snaps) do %}
                        <option>{{snap.name}}</option>
                      {% end %}
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="field is-horizontal">
              <div class="field-label is-normal">
                <label class="label">Use Template</label>
              </div>
              <div class="field-body">
                <div class="field has-addons">
                  <div class="control is-expanded">
                    <div class="select is-fullwidth">
                      <select id="param-templates">
                      {% for _, t in ipairs(templates) do %}
                        <option>{{t.name}}</option>
                      {% end %}
                      </select>
                    </div>
                  </div>
                  <div class="control">
                    <div class="button" id="use-template">Apply</div>
                  </div>
                </div>
              </div>
            </div>

            <div class="field is-horizontal">
              <div class="field-label is-normal">
                <label class="label">Add Parameter</label>
              </div>
              <div class="field-body">
                <div class="field has-addons">
                  <div class="control is-expanded">
                    <div class="select is-fullwidth">
                      <select id="all-params">
                      {% for _, param in ipairs(params) do %}
                        <option>{{param.name}}</option>
                      {% end %}
                      </select>
                    </div>
                  </div>
                  <div class="control">
                    <div class="button" id="add-param">+</div>
                  </div>
                </div>
              </div>
            </div>

            <div id="insert-here" hidden></div>

            <div class="field is-horizontal">
              <div class="field-label"></div>
              <div class="field-body">
                <div class="field">
                  <div class="control">
                    <button class="button is-primary">
                      Create Jail
                    </button>
                  </div>
                </div>
              </div>
            </div>

          </form>
        ]], {
            snaps = snaps(),
            params = params(),
            templates = templates,
        }),
        template.process([[
          <script>
            const param_types = {*param_types*}
            const templates = {*templates*}
            const jailsdir = "{*jailsdir*}"
          </script>
        ]], { param_types=ucl.to_json(param_types()),
              templates=ucl.to_json(templates),
              jailsdir=jailsdir }),
        template.process(string.format([[<script>{(%s/scripts/jails.js)}</script>]], basedir)),
    }
end

local function make_handler(contents)
    return function(request)
        local body = template.process([[
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <title>FreeBSD Jails Administration</title>
              <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
              <link rel="stylesheet" href="https://unpkg.com/bulmaswatch/{{theme}}/bulmaswatch.min.css">
            </head>
            <body>
              <div class="columns is-centered">
                <div class="column is-narrow">

                  <h1 class="title"><span class="has-text-danger">FreeBSD</span> Jails Administration</h1>
                  {% for _, content in ipairs(contents) do %}
                    {*content*}
                  {% end %}

                </div>
              </div>
            </body>
          </html>
        ]], { theme=theme, contents=contents(request) })
        return { status=200, reason="ok", body=body }
    end
end

local function validate(form)
    -- TODO: This could be a lot stricter...
    local todo = ".*"
    local validators = {
        -- Boolean params
        [function(s) return s:match(todo) end] = {
            "allow.chflags",
            "allow.extattr",
            "allow.mlock",
            "allow.mount",
            "allow.mount.devfs",
            "allow.mount.lindebugfs",
            "allow.mount.procfs",
            "allow.mount.tmpfs",
            "allow.mount.zfs",
            "allow.nfsd",
            "allow.quotas",
            "allow.raw_sockets",
            "allow.read_msgbuf",
            "allow.reserved_ports",
            "allow.set_hostname",
            "allow.socket_af",
            "allow.suser",
            "allow.sysvipc",
            "allow.unprivileged_proc_debug",
            "allow.vmm",
            "ip4.saddrsel",
            "ip6.saddrsel",
            "persist",
        },
        -- Integer params
        [function(s) return s:match(todo) end] = {
            "children.max",
            "devfs_ruleset",
            "enforce_statfs",
            "linux.oss_version",
            "osreldate",
            "securelevel",
            "zfs.mount_snapshot"
        },
        -- String params
        [function(s) return s:match(todo) end] = {
            "ip4.addr",
            "ip6.addr",
            "name",
            "linux.osrelease",
            "linux.osname",
            "osrelease",
            "path",
            "host.domainname",
            "host.hostid",
            "host.hostname",
            "host.hostuuid",
        },
        -- Origin params
        [function(s) return s:match(todo) end] = {
            "ip4",
            "ip6",
            "zfs",
            "host",
            "linux",
            "sysvmsg",
            "sysvsem",
            "sysvshm",
            "vnet",
        },
        -- Variables
        [function(s) return s:match(todo) end] = {
            "$snapshot",
        },
    }
    local valid = {}
    local invalid = {}
    for field, value in pairs(form) do
        local validated = false
        for validate, params in pairs(validators) do
            for _, param in ipairs(params) do
                if field == param then
                    -- Found a known field, process and validate it
                    if type(value) == "table" then
                        value = table.concat(value)
                    end
                    value = tostring(value)
                    validated = validate(value)
                    goto checked -- XXX: this is safe, right?
                end
            end
        end
        ::checked::
        if validated then
            valid[field] = value
        else
            invalid[field] = value
        end
    end
    if #invalid > 0 then
        return nil, #invalid .. " invalid form fields"
    end
    return valid
end

--
-- TODO/IDEAS
--
--  * A template should be a set of rules about how the config is generated.
--    The selected template should render the form according to the rules on
--    the client page and to generate the config file on the server.  A high
--    level template language might be useful for ensuring rules are the same
--    on client and server.
--
--  * The backend could ignore the jail service altogether and generate its
--    own config (e.g. in YAML) for a new service.  Probably too much work.

local function create_contents(request)
    local content_type = table.concat(request.headers["content-type"].list)
    if content_type ~= "application/x-www-form-urlencoded" then
        return { status=415, reason="unsupported media type",
                 body="This form must be submitted as application/x-www-form-urlencoded data." }
    end
    local form = httpd.parse_query_string(request.body)
    local config, err = validate(form)
    if not config then
        return { status=422, reason="unprocessable content", body=err }
    end
    local conf = template.process([[
# generated config
{*config.name*} {
 {% for param, value in pairs(config) do %}
  {% if param ~= "name" then %}
    {*param*} = "{*value*}";
  {% end %}
 {% end %}
}
    ]], {config=config})
    -- FIXME: too slow, need to fork this work off and respond faster
    -- Write the config file
    local f = assert(io.open(string.format("/etc/jail.conf.d/%s.conf", config.name), "w"))
    f:write(conf)
    f:close()
    -- Set up the filesystem
    os.execute(string.format("zfs create %s/%s", jailsds, config.name))
    for _, set in ipairs(config.distsets or {"base"}) do
        os.execute(string.format("tar xf %s/%s/%s.txz -C %s/%s/",
                                 snapsdir, config["$snapshot"], set,
                                 jailsdir, config.name))
    end
    os.execute(string.format("service jail start %s", config.name))
    local debug = "\n"..ucl.to_format(form, "yaml")
    return {
        template.process([[
          <h2 class="subtitle">{{name}}.conf</h2>
          <pre>
          {*conf*}
          </pre>
          <h2 class="subtitle">Debug Info</h2>
          <pre>
          {*debug*}
          </pre>
        ]], { name=config.name, conf=conf, debug=debug }),
    }
end

--print(ucl.to_format(create_contents({headers={["content-type"]={list={"application/x-www-form-urlencoded"}}},
--                 body="$snapshot=20231116-500bf0592cf1&name=foo"})), "yaml")

local server = httpd.create_server("/var/log/jails.log")
server:add_route("GET", "^/$", make_handler(main_contents))
server:add_route("POST", "^/create$", make_handler(create_contents))
server:run(true)
