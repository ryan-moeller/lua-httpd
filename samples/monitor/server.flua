#!/usr/libexec/flua
--
-- Copyright (c) 2016-2025 Ryan Moeller
--
-- SPDX-License-Identifier: ISC
--

--
-- Use with inetd:
-- http    stream  tcp     nowait  root    /path/to/lua-httpd/samples/monitor/server.flua  monitor-server
--

local basedir <const> = posix.libgen.dirname(arg[0])

local function path(...)
    return table.concat(table.pack(...), "/")
end

local function relpath(...)
    return path(basedir, ...)
end

-- Add import search paths for the modules in this repo.
package.path = table.concat({
    relpath("../../?.lua"),             -- httpd.lua
    relpath("../contrib/?.lua"),        -- samples/contrib/template.lua
    relpath("plugins/?.lua"),           -- samples/monitor/plugins/*.lua
    package.path
}, ";")

-- Redirect stderr to a log file.
do
    local STDERR_FILENO <const> = 2
    require("fileno") -- from ryan-moeller/flualibs
    local f <close> = io.open("/var/log/mon-errors.log", "a+")
    f:setvbuf("no")
    assert(posix.unistd.dup2(f:fileno(), STDERR_FILENO) == STDERR_FILENO)
end

local httpd = require("httpd")
local template = require("template")

local theme = "darkly"
local plugins = {"klds", "ps", "exports", "zpools", "datasets", "pkgs"}

local function monitor(request)
    local tables = {}
    for _, name in ipairs(plugins) do
        local ctx = require(name)
        table.insert(tables, template.process([[
        <h2 class="subtitle">{{title}}</h2>
        <table class="table">
          <thead>
            <tr>
            {% for _, field in ipairs(cols) do %}
              <th>
              {% if #field[1] == #field[2] then %}
                {{field[2]}}
              {% else %}
                <abbr title="{{field[1]}}">{{field[2]}}</abbr>
              {% end %}
              </th>  
            {% end %}
            </tr>
          </thead>
          <tbody>
          {% for _, row in ipairs(rows()) do %}
            <tr>
            {% for _, field in ipairs(cols) do %}
              <td>{{row[(field[1])]}}</td>
            {% end %}
            </tr>
          {% end %}
          </tbody>
        </table>
]], ctx))
    end
    local body = template.process([[
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>FreeBSD Monitor</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
    <link rel="stylesheet" href="https://unpkg.com/bulmaswatch/{{theme}}/bulmaswatch.min.css">
  </head>
  <body>
    <div class="columns is-centered">
      <div class="column is-narrow">

        <h1 class="title"><span class="has-text-danger">FreeBSD</span> Monitor</h1>
        {% for _, table in ipairs(tables) do %}
          {*table*}
        {% end %}

      </div>
    </div>
  </body>
</html>
]], { theme=theme, tables=tables })
    return { status=200, reason="ok", body=body }
end
--print(monitor({}))

local server = httpd.create_server("/var/log/mon.log")
server:add_route("GET", "^/$", monitor)
server:run(true)

-- vim: set et sw=4:
